/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        if(!root){
            return {};
        }
        int levels = getDepth(root);
        vector<vector<int>> result(levels);
        queue<TreeNode*> q; 
        q.push(root);
        while(!q.empty()){
            size_t size = q.size();
            vector<int> nodes;
            nodes.reserve(size);
            for(int i=0; i<size; i++){
                TreeNode* curr = q.front();
                q.pop();
                nodes.emplace_back(curr->val);
                if(curr->left){
                    q.push(curr->left);
                }
                if(curr->right){
                    q.push(curr->right);
                }
            }
            result[--levels] = nodes;
        }
        return result;
    }
private:
    int getDepth(TreeNode* root) {
        if(!root){
            return 0;
        } 
        return 1 + max(getDepth(root->left), getDepth(root->right));
    }
};
