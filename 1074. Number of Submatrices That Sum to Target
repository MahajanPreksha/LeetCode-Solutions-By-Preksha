class Solution {
private:
    int subArraySum(vector<int>& nums, int k){
        unordered_map<int, int> mp;
        mp[0] = 1;
        int curr = 0, ans = 0;
        for(auto &val:nums){
            curr +=val;
            if(mp.find(curr - k)!=mp.end()){
                ans +=mp[curr - k];
            }
            mp[curr]++;
        }
        return ans;
    }
public:
    int numSubmatrixSumTarget(vector<vector<int>>& matrix, int target) {
        int ans = 0;
        int m = matrix.size();
        int n = matrix[0].size();
        for(int i=0; i<m; i++){
            vector<int> sum(n, 0);
            for(int j=i; j<m; j++){
               for(int k=0; k<n; k++){
                  sum[k] +=matrix[j][k];
               }               
               ans +=subArraySum(sum, target);
            }
        }
        return ans;
    }
};
