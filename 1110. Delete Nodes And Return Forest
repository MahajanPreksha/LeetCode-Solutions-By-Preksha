/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> ans;
    void solve(TreeNode* &root, map<int, int>& mp){
        if(root==NULL){
            return;
        }
        if(mp[root->val]){
            if(root->left){
                cout<<root->left->val<<endl;
                ans.push_back(root->left);
                solve(root->left, mp);
            }
            if(root->right){
                cout<<root->right->val<<endl;
                ans.push_back(root->right);
                solve(root->right, mp );
            }
            root->val =  -1;
            root = nullptr;
            return;
        }
        else{
            solve(root->left, mp);
            solve(root->right, mp);
        }
    }
    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_delete) {
        map<int, int> mp;
        for(int i=0; i<to_delete.size(); i++){
            mp[to_delete[i]] = 1;
        }
        if(!mp[root->val]){
            ans.push_back(root);
        }
        solve(root, mp);
        vector<TreeNode*> tree ;
        for(int i=0; i<ans.size(); i++){
            if(ans[i]!=nullptr && ans[i]->val!=-1){
                tree.push_back(ans[i]) ;
            }
        }
        return tree;
    }
};
