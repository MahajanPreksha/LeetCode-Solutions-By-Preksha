/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* merge(ListNode* left, ListNode* right){
        if(left==NULL){
            return right;
        }
        if(left==NULL){
            return left;
        }
        ListNode* ans = new ListNode(-1);
        ListNode* ptr = ans;
        while(left!=NULL && right!=NULL){
            if(left->val<=right->val){
                ptr->next = left;
                ptr = left;
                left = left->next;
            }
            else{
                ptr->next = right;
                ptr = right;
                right = right->next;
            }
        }
        if(left!=NULL){
            ptr->next = left;
        }
        if(right!=NULL){
            ptr->next = right;
        }
        return ans->next;
    }
    ListNode* sortList(ListNode* head) {
        if(head==NULL || head->next==NULL){
            return head;
        }
        ListNode* slow = head;
        ListNode* fast = head;
        ListNode* prev = NULL;
        while(fast!=NULL && fast->next!=NULL){
            prev = slow;
            slow = slow->next;
            fast = fast->next->next;
        }
        prev->next = NULL;
        ListNode* l1 = sortList(head);
        ListNode* l2 = sortList(slow);
        return merge(l1, l2);
    }
};
