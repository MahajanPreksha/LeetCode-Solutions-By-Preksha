class Solution {
public:
    int find_parent(vector<int>& parent, int i) {
        if(parent[i]==i){
            return i;
        }
        return parent[i] = find_parent(parent, parent[i]);
    }
    void find(vector<vector<int>> edges, int n, set<vector<int>>& st, vector<int>& parent, int flag){
        for(int i=0; i<=n; i++){
            parent[i] = i;
        }
        for(auto it:edges){
            int x1 = find_parent(parent, it[1]);
            int x2 = find_parent(parent, it[2]);
            if(x1==x2){
                st.insert({it});
            }
            parent[x2] = x1;
        }
    }
    int maxNumEdgesToRemove(int n, vector<vector<int>>& edges) {
        vector<vector<int> > bob_adj;
        vector<vector<int> > alice_adj;
        for(auto it:edges){
            if(it[0]==3){
                bob_adj.push_back(it);
                alice_adj.push_back(it);
            }
        }
        for(auto it:edges){
            if(it[0]==1){
                alice_adj.push_back(it);
            }
            else if(it[0]==2){
                bob_adj.push_back(it);
            }
        }
        set<vector<int>> st;
        vector<int> vis(n+1, 0);
        vector<int> parent(n+1, 0);
        find(alice_adj, n, st, parent, 1);
        int x1 = find_parent(parent, 1);
        for(int i=2; i<=n; i++){
            if(find_parent(parent, i)!= x1){
                return -1;
            }
        }
        parent.clear();
        find(bob_adj, n, st, parent, 2);
        int x2 = find_parent(parent, 1);
        for(int i=2; i<=n; i++){
            if(find_parent(parent, i)!=x2){
                return -1;
            }
        }
        return st.size();
    }
};
