class Solution {
public:
    void dfs(int i, int j, vector<vector<char>>& grid, vector<vector<int>>& vis, int row[], int col[]){
        int m = grid.size();
        int n = grid[0].size();
        vis[i][j] = 1;
        for(int k=0; k<4; k++){
            int nextRow = i + row[k];
            int nextCol = j + col[k];
            if(nextRow>=0 && nextRow<m && nextCol>=0 && nextCol<n && grid[nextRow][nextCol]=='1' && !vis[nextRow][nextCol]){
                dfs(nextRow, nextCol, grid, vis, row, col);
            }
        }
    }
    int numIslands(vector<vector<char>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        int row[4] = {0, 1, 0, -1};
        int col[4] = {1, 0, -1, 0};
        vector<vector<int>> vis(m, vector<int>(n, 0));
        int islands = 0;
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(grid[i][j]=='1' && !vis[i][j]){
                    dfs(i, j, grid, vis, row, col);
                    islands++;
                }
            }
        }
        return islands;
    }
};
