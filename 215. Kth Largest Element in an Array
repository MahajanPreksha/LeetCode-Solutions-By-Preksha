class Solution {
public:
    int quickSelect(vector<int>& nums, int first, int last, int k){
        if(first<=last){
            int pivot = partition(nums, first, last);
            if(pivot==k) {
                return nums[pivot];
            }
            else if(pivot<k){
                return quickSelect(nums, pivot+1, last, k);
            }
            else{
                return quickSelect(nums, first, pivot-1, k);
            }
        }
        return -1;
    }
    int partition(vector<int>& nums, int first, int last){
        int pivotValue = nums[last];
        int i = first;
        for(int j=first; j<last; j++){
            if(nums[j]<=pivotValue) {
                swap(nums[i], nums[j]);
                i++;
            }
        }
        swap(nums[i], nums[last]);
        return i;
    }
    int findKthLargest(vector<int>& nums, int k) {
        int n = nums.size();
        return quickSelect(nums, 0, n-1, n-k);
    }
};
