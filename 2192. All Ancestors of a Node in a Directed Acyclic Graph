class Solution {
public:
    vector<vector<int>> getAncestors(int n, vector<vector<int>>& edges) {
        vector<int> deg(n, 0);
        vector<vector<int>> adj(n);
        for(auto& e:edges){
            int v = e[0];
            int w = e[1];
            adj[v].push_back(w);
            deg[w]++;
        }
        queue<int> q;
        for(int i=0; i<n; i++){
            if(deg[i]==0){
                q.push(i);
            }
        }
        vector<vector<int>> ancestor(n);
        while(!q.empty()){
            int v = q.front();
            q.pop();
            for(int w:adj[v]){
                auto& aw = ancestor[w];
                aw.push_back(v);
                aw.insert(aw.end(), ancestor[v].begin(), ancestor[v].end());
                sort(aw.begin(), aw.end());
                aw.erase(unique(aw.begin(), aw.end()), aw.end());
                if(--deg[w]==0){
                    q.push(w);
                }
            }
        }        
        return ancestor;
    }
};
