class DisjointSet{
    vector<int> rank;
    vector<int> parent;
    public:
    DisjointSet(int n){
        rank.resize(n);
        parent.resize(n);
        for(int i = 0; i<n; i++){
            rank[i] = 0;
            parent[i] = i;
        }
    }
    int findParent(int node){
        if(node==parent[node]){
            return node;
        }
        return parent[node] = findParent(parent[node]);
    }
    void unionSet(int node1, int node2){
        node1 = findParent(node1);
        node2 = findParent(node2);
        if(rank[node1]==rank[node2]){
            parent[node1] = node2;
            rank[node2]++;
        }
        else if(rank[node1]>rank[node2]){
            parent[node2] = node1;
        }
        else{
            parent[node1] = node2;
        }
    }
};
class Solution {
public:
    bool canTraverseAllPairs(vector<int>& nums) {
        int n = nums.size();
        DisjointSet obj(n);
        unordered_map<int, int>m;
        for(int i=0; i<n; i++){
            int x = nums[i];
            while(x%2==0){
                x /=2;
                if(m.find(2)==m.end()){
                    m[2] = i;
                }
                else{
                    obj.unionSet(m[2],i);
                }
            }
            while(x%3==0){
                x /=3;
                if(m.find(3)==m.end()){
                    m[3] = i;
                }
                else{
                    obj.unionSet(m[3],i);
                }
            }
            for(long long j=5; j*j<=x; j+=6){
                while(x%j==0){
                    x /=j;
                    if(m.find(j)==m.end()){
                        m[j] = i;
                    }
                    else{
                        obj.unionSet(m[j], i);
                    }
                }
                while(x%(j+2)==0){
                    x /=(j+2);
                    if(m.find((j+2))==m.end()){
                        m[(j+2)] = i;
                    }
                    else{
                        obj.unionSet(m[(j+2)],i);
                    }
                }
            }
            if(x>1){
                if(m.find(x)==m.end()){
                    m[x] = i;
                }
                else{
                    obj.unionSet(m[x], i);
                }
            }
        }
        int x = obj.findParent(0);
        for(int i=0; i<n; i++){
            if(x!=obj.findParent(i)){
                return false;
            }
        }
        return true;
    }
};
