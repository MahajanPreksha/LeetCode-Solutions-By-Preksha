class Solution {
public:
    long long minimumCost(string source, string target, vector<char>& original, vector<char>& changed, vector<int>& cost) {
        int n = source.length();
        if(n!=target.length()){
            return -1;
        }
        int m = cost.size();
        long long sum = 0;
        vector<vector<pair<int, int>>> adj(26);
        for(int j=0; j<m; j++){
            adj[original[j] - 'a'].push_back(make_pair(changed[j] - 'a', cost[j]));
        }
        vector<vector<long long>> matrix(26, vector<long long>(26, LLONG_MAX));
        for(int i=0; i<26; i++){
            matrix[i][i] = 0;
        }
        for(int i=0; i<26; i++){
            for(const auto& edge:adj[i]){
                matrix[i][edge.first] = min(matrix[i][edge.first], static_cast<long long>(edge.second));
            }
        }
        for(int k=0; k<26; k++){
            for(int i=0; i<26; i++){
                for(int j=0; j<26; j++){
                    if(matrix[i][k]!=LLONG_MAX && matrix[k][j]!=LLONG_MAX){
                        matrix[i][j] = min(matrix[i][j], matrix[i][k] + matrix[k][j]);
                    }
                }
            }
        }
        for(int i=0; i<n; i++){
            if(source[i]!=target[i]){
                if(matrix[source[i] - 'a'][target[i] - 'a']==LLONG_MAX){
                    return -1;
                }
                else{
                    sum += matrix[source[i] - 'a'][target[i] - 'a'];
                }
            }
        }
        return sum;
    }
};
