class Solution {
public:
    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {
        if(n==1){
            return {0};
        }
        vector<vector<int>> graph(n);
        vector<int> degrees(n);
        for(const auto& edge:edges){
            graph[edge[0]].push_back(edge[1]);
            graph[edge[1]].push_back(edge[0]);
            degrees[edge[0]]++;
            degrees[edge[1]]++;
        }
        queue<int> q;
        vector<int> minimum_height_trees;
        for(int i=0; i<degrees.size(); i++){
            if(degrees[i]==1){
                q.push(i);
            }
        }
        while(!q.empty()){
            minimum_height_trees.clear();
            int size = q.size();
            while(size--){
                int u = q.front();
                q.pop();
                minimum_height_trees.push_back(u);
                for(const auto& v:graph[u]){
                    degrees[v]--;
                    if(degrees[v]==1){
                        q.push(v);
                    }
                }
            }
        }
        return minimum_height_trees;
    }
};
