class Solution {
public:
    int leastInterval(vector<char>& tasks, int n) {
        unordered_map<char, int> mp;
        int count = 0;
        for(auto e:tasks){
            mp[e]++;
            count = max(count, mp[e]);
        }
        int ans = (count - 1) * (n + 1);
        for(auto e:mp){
            if(e.second==count){
                ans++;
            }
        }
        return max((int)tasks.size(), ans);
    }
};
//OR
// unordered_map<char, int> taskFreq;
// for(auto t:tasks){
//     taskFreq[t]++;
// }
// priority_queue<int> pq;
// for(auto e:taskFreq){
//     pq.push(e.second);
// }
// int totalTime = 0;
// while(!pq.empty()){
//     vector<int> temp;
//     for(int i=0; i<=n; i++){
//         if(!pq.empty()){
//             int freq = pq.top();
//             pq.pop();
//             if(freq>1){
//                 temp.push_back(freq-1);
//             }
//         }
//         totalTime++;
//         if(pq.empty() && temp.empty()){
//             return totalTime;
//         }
//     }
//     for(auto t:temp){
//         pq.push(t);
//     }
// }
// return totalTime;
//     }
// };
