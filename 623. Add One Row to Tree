/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* addOneRow(TreeNode* root, int val, int depth) {
        if(depth==1){
            TreeNode* new_root = new TreeNode(val);
            new_root->left = root;
            return new_root;
        }
        queue<TreeNode*> q;
        q.push(root);
        int d = 1;
        while(!q.empty()){
            int nodesAtCurrentLevel = q.size();
            for(int i=0; i<nodesAtCurrentLevel; i++){
                TreeNode* currNode = q.front();
                q.pop();
                if(d==depth-1){
                    TreeNode* l = NULL;
                    TreeNode* r = NULL;
                    if(currNode->left){
                        l = currNode->left;
                    }
                    if(currNode->right){
                        r = currNode->right;
                    }
                    TreeNode* new_l = new TreeNode(val);
                    TreeNode* new_r = new TreeNode(val);
                    currNode->left = new_l;
                    currNode->right = new_r;
                    new_l->left = l;
                    new_r->right = r;
                }
                if(currNode->left){
                    q.push(currNode->left);
                }
                if(currNode->right){
                    q.push(currNode->right);
                }
            }
            d++;
            if(d>=depth){
                break;
            }
        }
        return root;
    }
};
