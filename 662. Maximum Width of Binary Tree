/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    typedef unsigned long long ll;
    int widthOfBinaryTree(TreeNode* root) {
        if(root==NULL){
            return 0;
        }
        queue<pair<TreeNode*, int>> q;
        q.push({root, 0});
        ll res = 0;
        while(!q.empty()){
            int nodesAtCurrentLevel = q.size();
            ll L = q.front().second;
            ll R = q.back().second;
            res = max(res, R-L+1);
            while(nodesAtCurrentLevel--){
                TreeNode* currNode = q.front().first;
                ll idx = q.front().second;
                q.pop();
                if(currNode->left!=NULL){
                    q.push({currNode->left, 2*idx+1});
                }
                if(currNode->right!=NULL){
                    q.push({currNode->right, 2*idx+2});
                }
            }
        }
        return res;
    }
};
