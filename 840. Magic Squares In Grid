class Solution {
public:
    bool validmagicsquare(int row, int col, vector<vector<int>>& grid){
        unordered_map<int, int> mp;
        int sum =  grid[row][col] + grid[row][col+1] + grid[row][col+2];
        int diagonal1 = grid[row][col] + grid[row+1][col+1] + grid[row+2][col+2];
        int diagonal2 =grid[row][col+2] + grid[row+1][col+1] + grid[row+2][col];
        if(sum!=diagonal1 || sum!=diagonal2){
            return false;
        }
        for(int i=row; i<row+3; i++){
            int rowsum = 0;
            int colsum = 0;
            for(int j=col; j<col+3; j++){
                if(grid[i][j]<1 || grid[i][j]>9){
                    return false;
                }
                else{
                    mp[grid[i][j]]++;
                    if(mp[grid[i][j]]>1){
                        return false ;
                    }
                }
                rowsum +=grid[i][j] ;
                colsum +=grid[j-col+row][i-row+col] ;
            
            }
            if(sum!=rowsum || sum!=colsum){
                return false;
            }
        }
        return true;
    }
    int numMagicSquaresInside(vector<vector<int>>& grid) {
        if(grid[0].size()<3 || grid.size()<3){
            return 0;
        }
        int cnt = 0;
        for(int i=0; i<=grid.size()-3; i++){
            for(int j=0; j<=grid[0].size()-3; j++){
                if(validmagicsquare(i, j, grid)){
                    cnt++;
                }
            }
        }
        return cnt;
    }
};
