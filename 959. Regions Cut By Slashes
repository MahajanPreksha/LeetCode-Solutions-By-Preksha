class Solution {
public:
    void dfs(int row, int col, vector<vector<int>> &ans){
        ans[row][col] = 1;
        vector<int> delrow = {-1, 0, 1, 0};
        vector<int> delcol={0, 1, 0, -1};
        int n = ans.size();
        for(int i=0; i<4; i++){
            int nrow = row + delrow[i];
            int ncol =col + delcol[i];
            if(0<=nrow && nrow<n && 0<=ncol && ncol<n && ans[nrow][ncol]==0){
                dfs(nrow,ncol,ans);
            }
        }
    }
    int regionsBySlashes(vector<string>& grid) {
        int n = grid.size();
        vector<vector<int>> ans(3*n, vector<int>(3*n, 0));
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                int row = i*3;
                int col = j*3;
                if(grid[i][j]=='/'){
                    ans[row][col+2] = 1;
                    ans[row+1][col+1] = 1;
                    ans[row+2][col] = 1;
                }
                else if(grid[i][j]=='\\'){
                    ans[row][col] = 1;
                    ans[row+1][col+1] = 1;
                    ans[row+2][col+2] = 1;
                }
            }
        }
        int size = 3*n;
        int cnt = 0;
        for(int i=0; i<size; i++){
            for(int j=0; j<size; j++){
                if(ans[i][j]==0){
                    cnt++;
                    dfs(i, j, ans);
                }
            }
        }
        return cnt;
    }
};
